
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import models.CoachModel;
import models.SportModel;


public class AddSportSchedule extends javax.swing.JFrame {

    private ArrayList<SportModel> sportsList = new ArrayList<>();
    private ArrayList<String> sportsNamesList = new ArrayList<>();
    
    private ArrayList<CoachModel> coachesList = new ArrayList<>();
    private ArrayList<String> coachNamesList = new ArrayList<>();
    
    private String[] availableTimes = new String[]{
        "07:00",
        "08:00",
        "09:00",
        "10:00",
        "11:00",
        "12:00",
        "13:00",
        "14:00",
        "15:00",
        "16:00",
        "17:00",
        "18:00"
    };
    
    /**
     * Creates new form AddSportSchedule
     */
    public AddSportSchedule() {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        loadSport();
        setTimes();
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        cbStart = new javax.swing.JComboBox<>();
        cbCoaches = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbSports1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cbEnd = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        fieldId = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Add Sport Schedule");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        cbCoaches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCoachesActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Sport");

        jLabel2.setText("Select Coach");

        cbSports1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSports1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Select Start Time");

        jLabel4.setText("Select End Time");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel5.setText("Sport Schedule ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(btnBack)
                            .addGap(182, 182, 182)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(63, 63, 63))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(225, 225, 225)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2)
                                    .addComponent(cbStart, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(cbEnd, 0, 260, Short.MAX_VALUE)
                                    .addComponent(cbCoaches, 0, 260, Short.MAX_VALUE)
                                    .addComponent(cbSports1, 0, 260, Short.MAX_VALUE)
                                    .addComponent(jLabel1)
                                    .addComponent(fieldId)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(278, 278, 278)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(235, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel8))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack)))
                .addGap(28, 28, 28)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbSports1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbCoaches, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbStart, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAdd)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        new AdminDashboard().setVisible(true);
        dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        
        String id = fieldId.getText().trim();
        
        if(id.contains(" ")){
            showDialog("ID shouldn't contain any spaces");
            return;
        }
        
        if(sportScheduleIDExists(id)){
            showDialog("A sport schedule with id alreay exists.");
            return;
        }
        
        int coachSelectedID = cbCoaches.getSelectedIndex();
        int sportSelectedID = cbSports1.getSelectedIndex();
        
        if(sportSelectedID < 0){
            showDialog("No Sports Found. Please Add a sport first");
            return;
        }
        
        SportModel sport = sportsList.get(sportSelectedID);
        
        if(coachSelectedID < 0){
            showDialog("No Coaches Found for "+sport.getSportName()+". Please Add a coach for "+sport.getSportName()+" first.");
            return;
        }
        
        CoachModel coach = coachesList.get(coachSelectedID);
        
        String startTime = availableTimes[cbStart.getSelectedIndex()];
        String endTime = availableTimes[cbEnd.getSelectedIndex()];
        
        if(Integer.parseInt(endTime.split(":")[0]) <= Integer.parseInt(startTime.split(":")[0])){
            showDialog("End Time should be after the Start Time");
            return;
        }
        
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter("schedules.txt", true));
            PrintWriter pw = new PrintWriter(bw);
            pw.println(id + "|"+
                    sport.getSportID()+"|"+sport.getSportName()+"|"+
                    coach.getCoachID()+"|"+coach.getCoachName()+"|"+
                    coach.getSportsCenter()+"|"+startTime+"|"+endTime+"|"+
                    (Integer.parseInt(endTime.split(":")[0]) - Integer.parseInt(startTime.split(":")[0])));
            bw.close();
            pw.close();
            showDialog("Sport Schedule Successfully Added");
            clearFields();
        } catch (IOException ex) {
            System.err.println("Error reading schedules.txt");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private boolean sportScheduleIDExists(String id){
        String line = "";
        try {
           BufferedReader br= new BufferedReader(new FileReader("schedules.txt"));
           while((line = br.readLine()) != null){
               if(line.contains("|")){
                       String[] data = line.split("\\|");
                       if(data[0].equals(id)){
                           return true;
                       }
               }
           }
           br.close();
           return false;
        } catch (FileNotFoundException ex) {
           System.err.println("Error reading schedules.txt");
           return false;
        } catch (IOException ex) {
            System.err.println("Error reading schedules.txt");
            return false;
        }
    }
    
    private void cbSports1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSports1ActionPerformed
        // TODO add your handling code here:
        int sportSelectedID = cbSports1.getSelectedIndex();
        
        if(sportSelectedID < 0){
            showDialog("No Sports Found. Please Add a sport first");
            return;
        }
        
        SportModel sport = sportsList.get(sportSelectedID);
        loadCoachesForSport(sport.getSportID());
    }//GEN-LAST:event_cbSports1ActionPerformed

    private void cbCoachesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCoachesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCoachesActionPerformed

    private void showDialog(String msg){
        JOptionPane.showMessageDialog(this, msg);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddSportSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddSportSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddSportSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddSportSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddSportSchedule().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox<String> cbCoaches;
    private javax.swing.JComboBox<String> cbEnd;
    private javax.swing.JComboBox<String> cbSports1;
    private javax.swing.JComboBox<String> cbStart;
    private javax.swing.JTextField fieldId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    // End of variables declaration//GEN-END:variables

    private void loadSport() {
        String line = "";
        try {
           BufferedReader br= new BufferedReader(new FileReader("sports.txt"));
           while((line = br.readLine()) != null){
               if(line.contains("|")){
                       String[] info = line.split("\\|");
                       System.out.println(line);
                   sportsList.add(new SportModel(info[0], info[1]));
                   sportsNamesList.add(info[1]);
               }
           }
           br.close();
           cbSports1.setModel(new DefaultComboBoxModel(sportsNamesList.toArray()));
        } catch (FileNotFoundException ex) {
           System.err.println("Error reading sports.txt");
        } catch (IOException ex) {
            System.err.println("Error reading sports.txt");
        }
    }
    
    private void loadCoachesForSport(String sportId) {
        coachesList.clear();
        coachNamesList.clear();
                
        String line = "";
        try {
           BufferedReader br= new BufferedReader(new FileReader("coaches.txt"));
           while((line = br.readLine()) != null){
               if(line.contains("|")){
                       String[] info = line.split("\\|");
                       CoachModel coach = new CoachModel(
                           info[0],
                           info[1],
                           info[2],
                           info[3],
                           Integer.parseInt(info[4]),
                           info[5],
                           info[6],
                           info[7],
                           info[8]
                   );
                   if(coach.getSportId().equals(sportId)){
                       coachesList.add(coach);
                       coachNamesList.add(coach.getCoachName());
                   }
               }
           }
           br.close();
           cbCoaches.setModel(new DefaultComboBoxModel(coachNamesList.toArray()));
        } catch (FileNotFoundException ex) {
           System.err.println("Error reading coaches.txt");
        } catch (IOException ex) {
            System.err.println("Error reading coaches.txt");
        }
    }

    private void setTimes() {
        cbStart.setModel(new DefaultComboBoxModel(availableTimes));
        cbEnd.setModel(new DefaultComboBoxModel(availableTimes));
    }

    private void clearFields() {
        loadSport();
        
        int sportSelectedID = cbSports1.getSelectedIndex();
        
        if(sportSelectedID < 0){
            showDialog("No Sports Found. Please Add a sport first");
            return;
        }
        
        SportModel sport = sportsList.get(sportSelectedID);
        loadCoachesForSport(sport.getSportID());
        
        setTimes();
    }
}
